//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v0.6.178 on Tue Jun  6 11:19:45 2023
//
//
// Buffer Definitions:
//
// cbuffer bool_register_block
// {
//
//   bool gUseMultiUV;                  // Offset:    0 Size:     4
//   bool gPointLightEnable0;           // Offset:    4 Size:     4 [unused]
//   bool gPointLightEnable1;           // Offset:    8 Size:     4 [unused]
//   bool gPointLightEnable2;           // Offset:   12 Size:     4 [unused]
//   bool gPointLightEnable3;           // Offset:   16 Size:     4 [unused]
//   bool gEnvMappingEnable;            // Offset:   20 Size:     4
//   bool gShadowEnable;                // Offset:   24 Size:     4 [unused]
//   bool gLightScatterEnable;          // Offset:   28 Size:     4
//   bool gFogEnable;                   // Offset:   32 Size:     4
//   bool gVertexBlendEnable2;          // Offset:   40 Size:     4
//   bool gVertexBlendEnable3;          // Offset:   44 Size:     4 [unused]
//   bool gVertexBlendEnable4;          // Offset:   48 Size:     4 [unused]
//   bool gUseInputVertexColor;         // Offset:   52 Size:     4 [unused]
//   int2 bool_register_block_padding;  // Offset:   56 Size:     8 [unused]
//
// }
//
// cbuffer model_high_frequency_block
// {
//
//   row_major float4x4 gStaticTransformMatrix;// Offset:    0 Size:    64
//   float4 gUVOffset0;                 // Offset:   64 Size:    16
//   float4 gUVOffset1;                 // Offset:   80 Size:    16
//   float4 gUVOffset2;                 // Offset:   96 Size:    16
//   float4 gShadowVector;              // Offset:  112 Size:    16
//   float4 gShadowOffset;              // Offset:  128 Size:    16
//
// }
//
// cbuffer model_high_frequency_material_block
// {
//
//   float4 gConstantColor;             // Offset:    0 Size:    16 [unused]
//   float4 gLScatterHighFreq;          // Offset:   16 Size:    16
//   float4 gHDRRate;                   // Offset:   32 Size:    16
//   float4 gSpecularColor;             // Offset:   48 Size:    16 [unused]
//   float4 gModelHighFreqPadding0;     // Offset:   64 Size:    16 [unused]
//   float4 gVelvetyColor;              // Offset:   80 Size:    16 [unused]
//   float4 gRimColor;                  // Offset:   96 Size:    16 [unused]
//   float4 gVelvetyRimParam;           // Offset:  112 Size:    16 [unused]
//
// }
//
// cbuffer model_high_frequency_light_block
// {
//
//   float4 gAmbientColor[2];           // Offset:    0 Size:    32
//   float4 gHemisphereVector;          // Offset:   32 Size:    16
//   row_major float3x4 gLightDirection;// Offset:   48 Size:    48 [unused]
//   row_major float3x4 gLightColorDir; // Offset:   96 Size:    48 [unused]
//   float4 gLightColorPoint[4];        // Offset:  144 Size:    64 [unused]
//   float4 gLightPosition[4];          // Offset:  208 Size:    64 [unused]
//
// }
//
// cbuffer model_middle_frequency_block
// {
//
//   row_major float4x4 gReflectMatrix; // Offset:    0 Size:    64
//   float4 gUVScaleByReflect[3];       // Offset:   64 Size:    48
//   float4 gUVMaskForReflect[3];       // Offset:  112 Size:    48
//
// }
//
// cbuffer model_low_frequency_block
// {
//
//   row_major float4x4 gViewProjection;// Offset:    0 Size:    64
//   float4 gEyePosition;               // Offset:   64 Size:    16
//   row_major float4x4 gViewMatrix;    // Offset:   80 Size:    64 [unused]
//   row_major float4x4 gShadowMatrix;  // Offset:  144 Size:    64
//   float4 gClipPlane0;                // Offset:  208 Size:    16 [unused]
//   float4 gLScatterSunColor;          // Offset:  224 Size:    16
//   float4 gLScatterSunDir;            // Offset:  240 Size:    16
//   float4 gLScatterOutTmp;            // Offset:  256 Size:    16
//   float4 gLScatterRayTmp;            // Offset:  272 Size:    16
//   float4 gLScatterMieTmp;            // Offset:  288 Size:    16
//   float4 gFogMiddle;                 // Offset:  304 Size:    16
//   float4 gFogFarMiddle;              // Offset:  320 Size:    16
//   float4 gFogDistance;               // Offset:  336 Size:    16
//   float4 gFogDensity;                // Offset:  352 Size:    16
//   float4 gHeightFogMiddle;           // Offset:  368 Size:    16
//   float4 gHeightFogFarMiddle;        // Offset:  384 Size:    16
//   float4 gHeightFogDistance;         // Offset:  400 Size:    16
//   float4 gHeightFogDensity;          // Offset:  416 Size:    16
//   row_major float4x4 gSecondShadowMatrix;// Offset:  432 Size:    64
//
// }
//
// cbuffer skinning_matrix_block
// {
//
//   row_major float3x4 gSkinningMatrices[256];// Offset:    0 Size: 12288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// bool_register_block               cbuffer      NA          NA    1        1
// skinning_matrix_block             cbuffer      NA          NA    2        1
// model_high_frequency_material_block    cbuffer      NA          NA    5        1
// model_high_frequency_light_block    cbuffer      NA          NA    6        1
// model_high_frequency_block        cbuffer      NA          NA    7        1
// model_middle_frequency_block      cbuffer      NA          NA    8        1
// model_low_frequency_block         cbuffer      NA          NA    9        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// NORMAL                   0   xyz         4     NONE   float   xyz
// BLENDWEIGHT              0   xyzw        5     NONE   float   xyzw
// BLENDWEIGHT              1   xyzw        6     NONE   float   xyzw
// BLENDWEIGHT              2   xyzw        7     NONE   float   xyzw
// BLENDINDICES             0   xyzw        8     NONE    uint   xyzw
// BLENDINDICES             1   xyzw        9     NONE    uint   xyzw
// BLENDINDICES             2   xyzw       10     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 8   xyzw        1     NONE   float   xyzw
// TEXCOORD                 9   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyzw
// TEXCOORD                 3   xyzw        6     NONE   float   xyzw
// COLOR                    1   xyzw        7     NONE   float   xyzw
// TEXCOORD                 4   xyz         8     NONE   float   xyz
// TEXCOORD                 5   xyz         9     NONE   float   xyz
// TEXCOORD                 7   xyzw       10     NONE   float   xyzw
// TEXCOORD                10   xyzw       11     NONE   float   xyzw
// TEXCOORD                11   xyzw       12     NONE   float   xyzw
// TEXCOORD                12   xyzw       13     NONE   float   xyzw
// TEXCOORD                13   xyzw       14     NONE   float   xyzw
//
vs_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb7[9], immediateIndexed
dcl_constantbuffer cb5[3], immediateIndexed
dcl_constantbuffer cb6[3], immediateIndexed
dcl_constantbuffer cb8[10], immediateIndexed
dcl_constantbuffer cb9[31], immediateIndexed
dcl_constantbuffer cb2[768], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_input v10.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_output o9.xyz
dcl_output o10.xyzw
dcl_output o11.xyzw
dcl_output o12.xyzw
dcl_output o13.xyzw
dcl_output o14.xyzw
dcl_temps 10
if_nz cb1[2].z
  imul null, r0.x, v8.x, l(3)
  mul r0.yzw, v5.xxxx, cb2[r0.x + 0].xxyz
  mov r1.x, l(0)
  mul r1.yzw, v5.xxxx, cb2[r0.x + 1].xxyz
  mul r2.xyz, v5.xxxx, cb2[r0.x + 2].xyzx
  mov r3.w, l(0)
  mov r4.xyz, r0.yzwy
  mov r6.xyz, r2.xyzx
  mov r4.w, r1.x
  mov r5.xyzw, r1.yzwx
  mov r6.w, r1.x
  mov r7.x, l(1)
  loop
    ige r2.w, r7.x, l(4)
    breakc_nz r2.w
    iadd r7.xyz, r7.xxxx, l(1, -1, -4, 0)
    ineg r2.w, r7.y
    ult r8.xy, r7.yyyy, l(1, 2, 0, 0)
    and r8.z, r2.w, r8.y
    movc r8.w, r8.y, l(0), r7.z
    and r3.xyz, r8.xzwx, v8.yzwy
    or r3.xy, r3.ywyy, r3.xzxx
    or r2.w, r3.y, r3.x
    imul null, r2.w, r2.w, l(3)
    add r3.x, -cb2[r0.x + 0].w, cb2[r2.w + 0].w
    add r3.y, -cb2[r0.x + 1].w, cb2[r2.w + 1].w
    add r3.z, -cb2[r0.x + 2].w, cb2[r2.w + 2].w
    dp3 r7.y, v5.yzwy, icb[r7.y + 0].xyzx
    mad r4.xyz, cb2[r2.w + 0].xyzx, r7.yyyy, r4.xyzx
    mad r5.xyz, cb2[r2.w + 1].xyzx, r7.yyyy, r5.xyzx
    mad r6.xyz, cb2[r2.w + 2].xyzx, r7.yyyy, r6.xyzx
    mov r8.x, r4.w
    mov r8.y, r5.w
    mov r8.z, r6.w
    mad r3.xyz, r3.xyzx, r7.yyyy, r8.xyzx
    mov r4.w, r3.x
    mov r5.w, r3.y
    mov r6.w, r3.z
  endloop
  lt r0.y, l(0.000000), v6.x
  if_nz r0.y
    mov r0.yzw, r4.xxyz
    mov r1.xyz, r5.xyzx
    mov r2.xyz, r6.xyzx
    mov r3.x, r4.w
    mov r3.y, r5.w
    mov r3.z, r6.w
    mov r1.w, l(0)
    loop
      ige r2.w, r1.w, l(4)
      breakc_nz r2.w
      ineg r2.w, r1.w
      ult r7.xyz, r1.wwww, l(1, 2, 3, 0)
      and r8.y, r2.w, r7.y
      iadd r9.xy, r1.wwww, l(-3, 1, 0, 0)
      movc r8.z, r7.y, l(0), r9.x
      ieq r8.w, r7.z, l(0)
      mov r8.x, r7.x
      and r7.xyzw, r8.xyzw, v9.xyzw
      or r7.xy, r7.ywyy, r7.xzxx
      or r2.w, r7.y, r7.x
      imul null, r2.w, r2.w, l(3)
      add r7.x, -cb2[r0.x + 0].w, cb2[r2.w + 0].w
      add r7.y, -cb2[r0.x + 1].w, cb2[r2.w + 1].w
      add r7.z, -cb2[r0.x + 2].w, cb2[r2.w + 2].w
      dp4 r3.w, v6.xyzw, icb[r1.w + 0].xyzw
      mad r0.yzw, cb2[r2.w + 0].xxyz, r3.wwww, r0.yyzw
      mad r1.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r1.xyzx
      mad r2.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r2.xyzx
      mad r3.xyz, r7.xyzx, r3.wwww, r3.xyzx
      mov r1.w, r9.y
    endloop
    mov r4.xyz, r0.yzwy
    mov r5.xyz, r1.xyzx
    mov r6.xyz, r2.xyzx
    mov r4.w, r3.x
    mov r5.w, r3.y
    mov r6.w, r3.z
    lt r0.y, l(0.000000), v7.x
    if_nz r0.y
      mov r0.yzw, r4.xxyz
      mov r1.xyz, r5.xyzx
      mov r2.xyz, r6.xyzx
      mov r3.x, r4.w
      mov r3.y, r5.w
      mov r3.z, r6.w
      mov r1.w, l(0)
      loop
        ige r2.w, r1.w, l(4)
        breakc_nz r2.w
        ineg r2.w, r1.w
        ult r7.xyz, r1.wwww, l(1, 2, 3, 0)
        and r8.y, r2.w, r7.y
        iadd r9.xy, r1.wwww, l(-3, 1, 0, 0)
        movc r8.z, r7.y, l(0), r9.x
        ieq r8.w, r7.z, l(0)
        mov r8.x, r7.x
        and r7.xyzw, r8.xyzw, v10.xyzw
        or r7.xy, r7.ywyy, r7.xzxx
        or r2.w, r7.y, r7.x
        imul null, r2.w, r2.w, l(3)
        add r7.x, -cb2[r0.x + 0].w, cb2[r2.w + 0].w
        add r7.y, -cb2[r0.x + 1].w, cb2[r2.w + 1].w
        add r7.z, -cb2[r0.x + 2].w, cb2[r2.w + 2].w
        dp4 r3.w, v7.xyzw, icb[r1.w + 0].xyzw
        mad r0.yzw, cb2[r2.w + 0].xxyz, r3.wwww, r0.yyzw
        mad r1.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r1.xyzx
        mad r2.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r2.xyzx
        mad r3.xyz, r7.xyzx, r3.wwww, r3.xyzx
        mov r1.w, r9.y
      endloop
      mov r4.xyz, r0.yzwy
      mov r5.xyz, r1.xyzx
      mov r6.xyz, r2.xyzx
      mov r4.w, r3.x
      mov r5.w, r3.y
      mov r6.w, r3.z
    endif
  endif
  dp4 r0.y, r4.xyzw, r4.xyzw
  rsq r0.y, r0.y
  mul o12.xyzw, r0.yyyy, r4.xyzw
  dp4 r0.y, r5.xyzw, r5.xyzw
  rsq r0.y, r0.y
  mul o13.xyzw, r0.yyyy, r5.xyzw
  dp4 r0.y, r6.xyzw, r6.xyzw
  rsq r0.y, r0.y
  mul o14.xyzw, r0.yyyy, r6.xyzw
  dp3 r0.y, v0.xyzx, r4.xyzx
  add r1.x, r4.w, r0.y
  dp3 r0.y, v0.xyzx, r5.xyzx
  add r1.y, r5.w, r0.y
  dp3 r0.y, v0.xyzx, r6.xyzx
  add r1.z, r6.w, r0.y
  mov r2.x, cb2[r0.x + 0].w
  mov r2.y, cb2[r0.x + 1].w
  mov r2.z, cb2[r0.x + 2].w
  add r0.xyz, r1.xyzx, r2.xyzx
  mul r1.xyzw, r0.yyyy, cb9[1].xyzw
  mad r1.xyzw, r0.xxxx, cb9[0].xyzw, r1.xyzw
  mad r1.xyzw, r0.zzzz, cb9[2].xyzw, r1.xyzw
  add r1.xyzw, r1.xyzw, cb9[3].xyzw
  dp3 r2.x, r4.xyzx, v4.xyzx
  dp3 r2.y, r5.xyzx, v4.xyzx
  dp3 r2.z, r6.xyzx, v4.xyzx
  dp3 r0.w, r2.xyzx, r2.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r2.xyzx
else
  mul r3.xyz, v0.yyyy, cb7[1].xyzx
  mad r3.xyz, v0.xxxx, cb7[0].xyzx, r3.xyzx
  mad r3.xyz, v0.zzzz, cb7[2].xyzx, r3.xyzx
  add r0.xyz, r3.xyzx, cb7[3].xyzx
  mul r3.xyzw, r0.yyyy, cb9[1].xyzw
  mad r3.xyzw, r0.xxxx, cb9[0].xyzw, r3.xyzw
  mad r3.xyzw, r0.zzzz, cb9[2].xyzw, r3.xyzw
  add r1.xyzw, r3.xyzw, cb9[3].xyzw
  mul r3.xyz, v4.yyyy, cb7[1].xyzx
  mad r3.xyz, v4.xxxx, cb7[0].xyzx, r3.xyzx
  mad r3.xyz, v4.zzzz, cb7[2].xyzx, r3.xyzx
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r2.xyz, r0.wwww, r3.xyzx
  mov o12.xyzw, l(1.000000,0,0,0)
  mov o13.xyzw, l(0,1.000000,0,0)
  mov o14.xyzw, l(0,0,1.000000,0)
endif
add r3.xyz, r0.xyzx, -cb9[4].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
div r3.xyz, r3.xyzx, r0.wwww
add r4.xyzw, v1.xyzw, cb7[4].xyzw
add r5.xyzw, v2.xyzw, cb7[5].xyzw
add r6.xyzw, v3.xyzw, cb7[6].xyzw
movc r7.xyzw, cb1[0].xxxx, r4.xyzw, r4.xyxy
movc r5.xyzw, cb1[0].xxxx, r5.xyzw, r4.xyxy
movc r4.xyzw, cb1[0].xxxx, r6.xyzw, r4.xyxy
mul r6.xyzw, r2.yyyy, cb8[1].xyxy
mad r6.xyzw, r2.xxxx, cb8[0].xyxy, r6.xyzw
mad r6.xyzw, r2.zzzz, cb8[2].xyxy, r6.xyzw
add r6.xyzw, r6.xyzw, cb8[3].xyxy
mul r8.xyzw, r6.zwzw, cb8[7].xyzw
mad r8.xyzw, r7.xyzw, cb8[4].xyzw, r8.xyzw
mul r9.xyzw, r6.zwzw, cb8[8].xyzw
mad r9.xyzw, r5.xyzw, cb8[5].xyzw, r9.xyzw
mul r6.xyzw, r6.xyzw, cb8[9].xyzw
mad r6.xyzw, r4.xyzw, cb8[6].xyzw, r6.xyzw
movc o3.xyzw, cb1[1].yyyy, r8.xyzw, r7.xyzw
movc o4.xyzw, cb1[1].yyyy, r9.xyzw, r5.xyzw
movc o5.xyzw, cb1[1].yyyy, r6.xyzw, r4.xyzw
dp3 r2.w, r2.xyzx, cb6[2].xyzx
mad o1.xyz, r2.wwww, cb6[1].xyzx, cb6[0].xyzx
mul r4.xyzw, r0.yyyy, cb9[10].xyzw
mad r4.xyzw, r0.xxxx, cb9[9].xyzw, r4.xyzw
mad r4.xyzw, r0.zzzz, cb9[11].xyzw, r4.xyzw
add r4.xyzw, r4.xyzw, cb9[12].xyzw
dp3 r2.w, r2.xyzx, cb7[7].xyzx
mad r3.w, cb7[8].y, |r2.w|, cb7[8].x
mad r4.z, r3.w, r4.w, r4.z
mul r5.xyzw, r0.yyyy, cb9[28].xyzw
mad r5.xyzw, r0.xxxx, cb9[27].xyzw, r5.xyzw
mad r5.xyzw, r0.zzzz, cb9[29].xyzw, r5.xyzw
add r5.xyzw, r5.xyzw, cb9[30].xyzw
mad o11.z, r3.w, r5.w, r5.z
div o10.xyzw, r4.xyzw, r4.wwww
add r0.w, r0.w, cb5[1].y
mul r4.xyz, r0.wwww, cb9[16].xyzx
exp r4.xyz, r4.xyzx
add r6.xyz, r4.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r6.xyz, cb5[1].xxxx, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3 r0.w, cb9[15].xyzx, r3.xyzx
mad r3.x, r0.w, r0.w, l(1.000000)
mad r0.w, cb9[18].w, r0.w, cb9[17].w
mul r3.y, r0.w, r0.w
mul r0.w, r0.w, r3.y
sqrt r0.w, r0.w
div r3.yzw, cb9[18].xxyz, r0.wwww
mad r3.xyz, cb9[17].xyzx, r3.xxxx, r3.yzwy
add r4.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, r4.xyzx
mul r3.xyz, r3.xyzx, cb9[14].xyzx
movc r4.xyz, cb1[1].wwww, r6.xyzx, l(1.000000,1.000000,1.000000,0)
movc r3.xyz, cb1[1].wwww, r3.xyzx, l(0,0,0,0)
movc r6.xy, cb1[2].xxxx, cb9[22].xyxx, l(0,0,0,0)
add r6.zw, r1.wwww, -cb9[21].xxxy
mul_sat r6.zw, r6.zzzw, cb9[21].zzzw
dp2 r0.w, r6.zwzz, r6.xyxx
mad r6.xyz, cb9[20].xyzx, r6.wwww, cb9[19].xyzx
add r3.w, -r0.w, l(1.000000)
mul r6.xyz, r0.wwww, r6.xyzx
movc r7.xy, cb1[2].xxxx, cb9[26].xyxx, l(0,0,0,0)
add r7.zw, r0.yyyy, -cb9[25].xxxy
mul_sat r7.zw, r7.zzzw, cb9[25].zzzw
dp2 r0.w, r7.zwzz, r7.xyxx
mad r7.xyz, cb9[24].xyzx, r7.wwww, cb9[23].xyzx
add r4.w, -r0.w, l(1.000000)
mul r7.xyz, r0.wwww, r7.xyzx
mul r4.xyz, r4.wwww, r4.xyzx
mul o7.xyz, r3.wwww, r4.xyzx
mad r3.xyz, r3.xyzx, r4.wwww, r7.xyzx
mad o6.xyz, r3.xyzx, r3.wwww, r6.xyzx
mov o0.xyzw, r1.xyzw
mov o1.w, cb5[2].w
mov o2.xyzw, l(0,0,0,0)
mov o6.w, r2.w
mov o7.w, l(0)
mov o11.xyw, r5.xyxw
mov o8.xyz, r2.xyzx
mov o9.xyz, r0.xyzx
ret
// Approximately 251 instruction slots used