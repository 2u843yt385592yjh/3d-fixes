// ---- Created with 3Dmigoto v1.3.16 on Mon Aug 28 16:24:25 2023

cbuffer bool_register_block : register(b1)
{
  bool gUseMultiUV : packoffset(c0);
  bool gPointLightEnable0 : packoffset(c0.y);
  bool gPointLightEnable1 : packoffset(c0.z);
  bool gPointLightEnable2 : packoffset(c0.w);
  bool gPointLightEnable3 : packoffset(c1);
  bool gEnvMappingEnable : packoffset(c1.y);
  bool gShadowEnable : packoffset(c1.z);
  bool gLightScatterEnable : packoffset(c1.w);
  bool gFogEnable : packoffset(c2);
  bool gVertexBlendEnable2 : packoffset(c2.z);
  bool gVertexBlendEnable3 : packoffset(c2.w);
  bool gVertexBlendEnable4 : packoffset(c3);
  bool gUseInputVertexColor : packoffset(c3.y);
  int2 bool_register_block_padding : packoffset(c3.z);
}

cbuffer model_high_frequency_block : register(b7)
{
  row_major float4x4 gStaticTransformMatrix : packoffset(c0);
  float4 gUVOffset0 : packoffset(c4);
  float4 gUVOffset1 : packoffset(c5);
  float4 gUVOffset2 : packoffset(c6);
  float4 gShadowVector : packoffset(c7);
  float4 gShadowOffset : packoffset(c8);
}

cbuffer model_low_frequency_block : register(b9)
{
  row_major float4x4 gViewProjection : packoffset(c0);
  float4 gEyePosition : packoffset(c4);
  row_major float4x4 gViewMatrix : packoffset(c5);
  row_major float4x4 gShadowMatrix : packoffset(c9);
  float4 gClipPlane0 : packoffset(c13);
  float4 gFogMiddle : packoffset(c14);
  float4 gFogFarMiddle : packoffset(c15);
  float4 gFogDistance : packoffset(c16);
  float4 gFogDensity : packoffset(c17);
  float4 gHeightFogMiddle : packoffset(c18);
  float4 gHeightFogFarMiddle : packoffset(c19);
  float4 gHeightFogDistance : packoffset(c20);
  float4 gHeightFogDensity : packoffset(c21);
  row_major float4x4 gSecondShadowMatrix : packoffset(c22);
}

cbuffer skinning_matrix_block : register(b2)
{
  row_major float3x4 gSkinningMatrices[256] : packoffset(c0);
}


// Injected
cbuffer gGlobalParam : register(b13)
{
  float4 gHemisphereDir[2] : packoffset(c0);
  float4 gHemisphereSkyColor[2] : packoffset(c2);
  float4 gHemisphereGroundColor[2] : packoffset(c4);
  float4 gDirectionalLightDir[6] : packoffset(c6);
  float4 gDirectionalLightColor[6] : packoffset(c12);
  row_major float4x4 gInvProjection : packoffset(c18);
  row_major float4x4 gInvView : packoffset(c22);
  row_major float4x4 gViewToShadow : packoffset(c26);
  row_major float4x4 gViewToHairShadow : packoffset(c30);
  float4 gScreen2proj : packoffset(c34);
  float4 gScreenSize : packoffset(c35);
  float4 gInvViewY : packoffset(c36);
  float4 gShadowCsVectorAndHairTexSize : packoffset(c37);
  float4 gShadowDensityFactor[2] : packoffset(c38);
  float4 gShadowDotDensityFactor[2] : packoffset(c40);
  uint4 gNumLight : packoffset(c42);
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main(
  float4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float3 v5 : NORMAL0,
  float4 v6 : TANGENT0,
  float4 v7 : BLENDWEIGHT0,
  float4 v8 : BLENDWEIGHT1,
  float4 v9 : BLENDWEIGHT2,
  uint4 v10 : BLENDINDICES0,
  uint4 v11 : BLENDINDICES1,
  uint4 v12 : BLENDINDICES2,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR1,
  out float3 o2 : COLOR0,
  out float4 o3 : TEXCOORD0,
  out float4 o4 : TEXCOORD1,
  out float4 o5 : TEXCOORD2,
  out float4 o6 : TEXCOORD3,
  out float4 o7 : TEXCOORD4,
  out float4 o8 : TEXCOORD5)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  int4 r0i,r1i,r2i,r3i,r4i,r5i,r6i,r7i,r8i,r9i,r10i;
  uint4 bitmask, uiDest;
  float4 fDest;

  if (gVertexBlendEnable2 != 0) {
    r0.x = (int)v10.x; // * 3;
    r0.yzw = gSkinningMatrices[v10.x]._m00_m01_m02 * v7.xxx;
    r1i.x = 0;
    r1.yzw = gSkinningMatrices[v10.x]._m10_m11_m12 * v7.xxx;
    r2.xyz = gSkinningMatrices[v10.x]._m20_m21_m22 * v7.xxx;
    r3i.w = 0;
    r4.xyz = r0.yzw;
    r5.xyz = r1.yzw;
    r6.xyz = r2.xyz;
    r7.xyz = r1i.xxx;
    r8i.x = 1;
    while (true) {
      r2i.w = cmp((int)r8i.x >= 4);
      if (r2i.w != 0) break;
      r8i.xyz = (int3)r8i.xxx + int3(1,-1,-4);
      r2i.w = -(int)r8i.y;
      r9i.xy = cmp((uint2)r8i.yy < int2(1,2));
      r9i.z = r9i.y ? r2i.w : 0;
      r9i.w = r9i.y ? 0 : r8i.z;
      r3i.xyz = r9i.xzw ? v10.yzw : 0;
      r3i.xy = (int2)r3i.yw | (int2)r3i.xz;
      r2i.w = (int)r3i.y | (int)r3i.x;
      r2i.w = (int)r2i.w;// * 3;
      r3.x = gSkinningMatrices[r2i.w]._m03 + -gSkinningMatrices[v10.x]._m03;
      r3.y = gSkinningMatrices[r2i.w]._m13 + -gSkinningMatrices[v10.x]._m13;
      r3.z = gSkinningMatrices[r2i.w]._m23 + -gSkinningMatrices[v10.x]._m23;
      r4.w = dot(v7.yzw, icb[r8i.y+0].xyz);
      r4.xyz = gSkinningMatrices[r2i.w]._m00_m01_m02 * r4.www + r4.xyz;
      r5.xyz = gSkinningMatrices[r2i.w]._m10_m11_m12 * r4.www + r5.xyz;
      r6.xyz = gSkinningMatrices[r2i.w]._m20_m21_m22 * r4.www + r6.xyz;
      r7.xyz = r3.xyz * r4.www + r7.xyz;
    }
    r0.y = cmp(0 < v8.x);
    if (r0.y != 0) {
      r0.yzw = r4.xyz;
      r1.xyz = r5.xyz;
      r2.xyz = r6.xyz;
      r3.xyz = r7.xyz;
      r1.w = 0;
      while (true) {
        r2i.w = cmp((int)r1.w >= 4);
        if (r2i.w != 0) break;
        r2i.w = -(int)r1.w;
        r8i.xyz = cmp((uint3)r1.www < int3(1,2,3));
        r9i.y = r8i.y ? r2i.w : 0;
        r10.xy = (int2)r1.ww + int2(-3,1);
        r9i.z = r8i.y ? 0 : r10.x;
        r9i.w = cmp((int)r8i.z == 0);
        r9i.x = r8i.x;
        r8i.xyzw = r9i.xyzw ? v11.xyzw : 0;
        r8i.xy = (int2)r8i.yw | (int2)r8i.xz;
        r2i.w = (int)r8i.y | (int)r8i.x;
        r2i.w = (int)r2i.w;// * 3;
        r8.x = gSkinningMatrices[r2i.w]._m03 + -gSkinningMatrices[v10.x]._m03;
        r8.y = gSkinningMatrices[r2i.w]._m13 + -gSkinningMatrices[v10.x]._m13;
        r8.z = gSkinningMatrices[r2i.w]._m23 + -gSkinningMatrices[v10.x]._m23;
        r3.w = dot(v8.xyzw, icb[r1.w+0].xyzw);
        r0.yzw = gSkinningMatrices[r2i.w]._m00_m01_m02 * r3.www + r0.yzw;
        r1.xyz = gSkinningMatrices[r2i.w]._m10_m11_m12 * r3.www + r1.xyz;
        r2.xyz = gSkinningMatrices[r2i.w]._m20_m21_m22 * r3.www + r2.xyz;
        r3.xyz = r8.xyz * r3.www + r3.xyz;
        r1.w = r10.y;
      }
      r4.xyz = r0.yzw;
      r5.xyz = r1.xyz;
      r6.xyz = r2.xyz;
      r7.xyz = r3.xyz;
      r0.y = cmp(0 < v9.x);
      if (r0.y != 0) {
        r0.yzw = r4.xyz;
        r1.xyz = r5.xyz;
        r2.xyz = r6.xyz;
        r3.xyz = r7.xyz;
        r1.w = 0;
        while (true) {
          r2.w = cmp((int)r1.w >= 4);
          if (r2.w != 0) break;
          r2.w = -(int)r1.w;
          r8.xyz = cmp((uint3)r1.www < int3(1,2,3));
          r9.y = r8.y ? r2.w : 0;
          r10.xy = (int2)r1.ww + int2(-3,1);
          r9.z = r8.y ? 0 : r10.x;
          r9.w = cmp((int)r8.z == 0);
          r9.x = r8.x;
          r8.xyzw = r9.xyzw ? v12.xyzw : 0;
          r8.xy = (int2)r8.yw | (int2)r8.xz;
          r2.w = (int)r8.y | (int)r8.x;
          r2.w = (int)r2.w;// * 3;
          r8.x = gSkinningMatrices[r2.w]._m03 + -gSkinningMatrices[v10.x]._m03;
          r8.y = gSkinningMatrices[r2.w]._m13 + -gSkinningMatrices[v10.x]._m13;
          r8.z = gSkinningMatrices[r2.w]._m23 + -gSkinningMatrices[v10.x]._m23;
          r3.w = dot(v9.xyzw, icb[r1.w+0].xyzw);
          r0.yzw = gSkinningMatrices[r2.w]._m00_m01_m02 * r3.www + r0.yzw;
          r1.xyz = gSkinningMatrices[r2.w]._m10_m11_m12 * r3.www + r1.xyz;
          r2.xyz = gSkinningMatrices[r2.w]._m20_m21_m22 * r3.www + r2.xyz;
          r3.xyz = r8.xyz * r3.www + r3.xyz;
          r1.w = r10.y;
        }
        r4.xyz = r0.yzw;
        r5.xyz = r1.xyz;
        r6.xyz = r2.xyz;
        r7.xyz = r3.xyz;
      }
    }
    r0.y = dot(v0.xyz, r4.xyz);
    r1.x = r0.y + r7.x;
    r0.y = dot(v0.xyz, r5.xyz);
    r1.y = r0.y + r7.y;
    r0.y = dot(v0.xyz, r6.xyz);
    r1.z = r0.y + r7.z;
    r2.x = gSkinningMatrices[v10.x]._m03;
    r2.y = gSkinningMatrices[v10.x]._m13;
    r2.z = gSkinningMatrices[v10.x]._m23;
    r0.xyw = r2.xyz + r1.xyz;
    r1.xyzw = gViewProjection._m10_m11_m12_m13 * r0.yyyy;
    r1.xyzw = r0.xxxx * gViewProjection._m00_m01_m02_m03 + r1.xyzw;
    r1.xyzw = r0.wwww * gViewProjection._m20_m21_m22_m23 + r1.xyzw;
    o0.xyzw = gViewProjection._m30_m31_m32_m33 + r1.xyzw;
    r1.x = dot(r4.xyz, v5.xyz);
    r1.y = dot(r5.xyz, v5.xyz);
    r1.z = dot(r6.xyz, v5.xyz);
    r1.xyz = float3(9.99999975e-06,0,0) + r1.xyz;
    r1.w = dot(r1.xyz, r1.xyz);
    r1.w = rsqrt(r1.w);
    r1.xyz = r1.yzx * r1.www;
    r2.x = dot(r4.xyz, v6.xyz);
    r2.y = dot(r5.xyz, v6.xyz);
    r2.z = dot(r6.xyz, v6.xyz);
    r2.xyz = float3(9.99999975e-06,0,0) + r2.xyz;
    r1.w = dot(r2.xyz, r2.xyz);
    r1.w = rsqrt(r1.w);
    r2.xyz = r2.zxy * r1.www;
    r3.w = r0.x;
    r4.w = r0.y;
  } else {
    r5.xyz = gStaticTransformMatrix._m10_m11_m12 * v0.yyy;
    r5.xyz = v0.xxx * gStaticTransformMatrix._m00_m01_m02 + r5.xyz;
    r5.xyz = v0.zzz * gStaticTransformMatrix._m20_m21_m22 + r5.xyz;
    r0.xyw = gStaticTransformMatrix._m30_m31_m32 + r5.xyz;
    r5.xyzw = gViewProjection._m10_m11_m12_m13 * r0.yyyy;
    r5.xyzw = r0.xxxx * gViewProjection._m00_m01_m02_m03 + r5.xyzw;
    r5.xyzw = r0.wwww * gViewProjection._m20_m21_m22_m23 + r5.xyzw;
    o0.xyzw = gViewProjection._m30_m31_m32_m33 + r5.xyzw;
    r5.xyz = gStaticTransformMatrix._m10_m11_m12 * v5.yyy;
    r5.xyz = v5.xxx * gStaticTransformMatrix._m00_m01_m02 + r5.xyz;
    r5.xyz = v5.zzz * gStaticTransformMatrix._m20_m21_m22 + r5.xyz;
    r5.xyz = float3(9.99999975e-06,0,0) + r5.xyz;
    r1.w = dot(r5.xyz, r5.xyz);
    r1.w = rsqrt(r1.w);
    r1.xyz = r5.yzx * r1.www;
    r5.xyz = gStaticTransformMatrix._m10_m11_m12 * v6.yyy;
    r5.xyz = v6.xxx * gStaticTransformMatrix._m00_m01_m02 + r5.xyz;
    r5.xyz = v6.zzz * gStaticTransformMatrix._m20_m21_m22 + r5.xyz;
    r5.xyz = float3(9.99999975e-06,0,0) + r5.xyz;
    r1.w = dot(r5.xyz, r5.xyz);
    r1.w = rsqrt(r1.w);
    r2.xyz = r5.zxy * r1.www;
    r3.w = r0.x;
    r4.w = r0.y;
  }
  r5.xyz = r2.zxy * r1.yzx;
  r5.xyz = r1.xyz * r2.xyz + -r5.xyz;
  r5.xyz = v6.www * r5.xyz;

float4 s = StereoParams.Load(0);
float separation = s.x;
float convergence = s.y;

float4x4 p = inverse(gInvProjection);

  //r6.xyz = gViewMatrix._m10_m11_m12 * r2.zzz;
  //r2.yzw = r2.yyy * gViewMatrix._m00_m01_m02 + r6.xyz;
  //r3.xyz = r2.xxx * gViewMatrix._m20_m21_m22 + r2.yzw;
  r3.xyz = mul(r2.yzx, gViewMatrix);

  float4 tmp;
  tmp = mul(float4(r3.xyz, 1), p);
  // Using 1 in place of depth may be a fudge factor
  tmp.x += separation * (1 - convergence);// * IniParams[7].x;// * 100;
  tmp = mul(tmp, gInvProjection);
  r3.xyz = tmp.xyz / tmp.w;

  //r2.xyz = gViewMatrix._m10_m11_m12 * r5.yyy;
  //r2.xyz = r5.xxx * gViewMatrix._m00_m01_m02 + r2.xyz;
  //r4.xyz = r5.zzz * gViewMatrix._m20_m21_m22 + r2.xyz;
  r4 = mul(r5.xyz, gViewMatrix);

  tmp = mul(float4(r4.xyz, 1), p);
  // Using 1 in place of depth may be a fudge factor
  tmp.x += separation * (1 - convergence);// * IniParams[7].x;// * 100;
  tmp = mul(tmp, gInvProjection);
  r4.xyz = tmp.xyz / tmp.w;

  //r2.xyz = gViewMatrix._m10_m11_m12 * r1.xxx;
  //r2.xyz = r1.zzz * gViewMatrix._m00_m01_m02 + r2.xyz;
  //r0.xyz = r1.yyy * gViewMatrix._m20_m21_m22 + r2.xyz;
  r0.xyz = mul(r1.zxy, gViewMatrix);

  tmp = mul(float4(r0.xyz, 1), p);
  // Using 1 in place of depth may be a fudge factor
  tmp.x += separation * (1 - convergence);// * IniParams[7].x;// * 100;
  tmp = mul(tmp, gInvProjection);
  r0.xyz = tmp.xyz / tmp.w;

  r2.xyzw = gUVOffset0.xyzw + v2.xyzw;
  r5.xyzw = gUVOffset1.xyzw + v3.xyzw;
  r6.xyzw = gUVOffset2.xyzw + v4.xyzw;
  o3.xyzw = gUseMultiUV ? r2.xyzw : r2.xyxy;
  o4.xyzw = gUseMultiUV ? r5.xyzw : r2.xyxy;
  o5.xyzw = gUseMultiUV ? r6.xyzw : r2.xyxy;
  o2.xyz = gUseInputVertexColor ? v1.xyz : float3(1,1,1);
  o1.w = dot(r1.zxy, gShadowVector.xyz);
  o1.xyz = float3(0,0,0);

  o6.xyzw = r3.xyzw;
  o7.xyzw = r4.xyzw;
  o8.xyzw = r0.xyzw;

  return;
}

#if 0
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v0.6.174 on Sun May 28 10:29:01 2023
//
//
// Buffer Definitions:
//
// cbuffer bool_register_block
// {
//
//   bool gUseMultiUV;                  // Offset:    0 Size:     4
//   bool gPointLightEnable0;           // Offset:    4 Size:     4 [unused]
//   bool gPointLightEnable1;           // Offset:    8 Size:     4 [unused]
//   bool gPointLightEnable2;           // Offset:   12 Size:     4 [unused]
//   bool gPointLightEnable3;           // Offset:   16 Size:     4 [unused]
//   bool gEnvMappingEnable;            // Offset:   20 Size:     4 [unused]
//   bool gShadowEnable;                // Offset:   24 Size:     4 [unused]
//   bool gLightScatterEnable;          // Offset:   28 Size:     4 [unused]
//   bool gFogEnable;                   // Offset:   32 Size:     4 [unused]
//   bool gVertexBlendEnable2;          // Offset:   40 Size:     4
//   bool gVertexBlendEnable3;          // Offset:   44 Size:     4 [unused]
//   bool gVertexBlendEnable4;          // Offset:   48 Size:     4 [unused]
//   bool gUseInputVertexColor;         // Offset:   52 Size:     4
//   int2 bool_register_block_padding;  // Offset:   56 Size:     8 [unused]
//
// }
//
// cbuffer model_high_frequency_block
// {
//
//   row_major float4x4 gStaticTransformMatrix;// Offset:    0 Size:    64
//   float4 gUVOffset0;                 // Offset:   64 Size:    16
//   float4 gUVOffset1;                 // Offset:   80 Size:    16
//   float4 gUVOffset2;                 // Offset:   96 Size:    16
//   float4 gShadowVector;              // Offset:  112 Size:    16
//   float4 gShadowOffset;              // Offset:  128 Size:    16 [unused]
//
// }
//
// cbuffer model_low_frequency_block
// {
//
//   row_major float4x4 gViewProjection;// Offset:    0 Size:    64
//   float4 gEyePosition;               // Offset:   64 Size:    16 [unused]
//   row_major float4x4 gViewMatrix;    // Offset:   80 Size:    64
//   row_major float4x4 gShadowMatrix;  // Offset:  144 Size:    64 [unused]
//   float4 gClipPlane0;                // Offset:  208 Size:    16 [unused]
//   float4 gFogMiddle;                 // Offset:  224 Size:    16 [unused]
//   float4 gFogFarMiddle;              // Offset:  240 Size:    16 [unused]
//   float4 gFogDistance;               // Offset:  256 Size:    16 [unused]
//   float4 gFogDensity;                // Offset:  272 Size:    16 [unused]
//   float4 gHeightFogMiddle;           // Offset:  288 Size:    16 [unused]
//   float4 gHeightFogFarMiddle;        // Offset:  304 Size:    16 [unused]
//   float4 gHeightFogDistance;         // Offset:  320 Size:    16 [unused]
//   float4 gHeightFogDensity;          // Offset:  336 Size:    16 [unused]
//   row_major float4x4 gSecondShadowMatrix;// Offset:  352 Size:    64 [unused]
//
// }
//
// cbuffer skinning_matrix_block
// {
//
//   row_major float3x4 gSkinningMatrices[256];// Offset:    0 Size: 12288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// bool_register_block               cbuffer      NA          NA    1        1
// skinning_matrix_block             cbuffer      NA          NA    2        1
// model_high_frequency_block        cbuffer      NA          NA    7        1
// model_low_frequency_block         cbuffer      NA          NA    9        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyz
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// NORMAL                   0   xyz         5     NONE   float   xyz
// TANGENT                  0   xyzw        6     NONE   float   xyzw
// BLENDWEIGHT              0   xyzw        7     NONE   float   xyzw
// BLENDWEIGHT              1   xyzw        8     NONE   float   xyzw
// BLENDWEIGHT              2   xyzw        9     NONE   float   xyzw
// BLENDINDICES             0   xyzw       10     NONE    uint   xyzw
// BLENDINDICES             1   xyzw       11     NONE    uint   xyzw
// BLENDINDICES             2   xyzw       12     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyzw
// TEXCOORD                 3   xyzw        6     NONE   float   xyzw
// TEXCOORD                 4   xyzw        7     NONE   float   xyzw
// TEXCOORD                 5   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer CB1[4], immediateIndexed
dcl_constantbuffer CB7[8], immediateIndexed
dcl_constantbuffer CB9[8], immediateIndexed
dcl_constantbuffer CB2[768], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyz
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_input v10.xyzw
dcl_input v11.xyzw
dcl_input v12.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 11
if_nz cb1[2].z
  imul null, r0.x, v10.x, l(3)
  mul r0.yzw, v7.xxxx, cb2[r0.x + 0].xxyz
  mov r1.x, l(0)
  mul r1.yzw, v7.xxxx, cb2[r0.x + 1].xxyz
  mul r2.xyz, v7.xxxx, cb2[r0.x + 2].xyzx
  mov r3.w, l(0)
  mov r4.xyz, r0.yzwy
  mov r5.xyz, r1.yzwy
  mov r6.xyz, r2.xyzx
  mov r7.xyz, r1.xxxx
  mov r8.x, l(1)
  loop
    ige r2.w, r8.x, l(4)
    breakc_nz r2.w
    iadd r8.xyz, r8.xxxx, l(1, -1, -4, 0)
    ineg r2.w, r8.y
    ult r9.xy, r8.yyyy, l(1, 2, 0, 0)
    and r9.z, r2.w, r9.y
    movc r9.w, r9.y, l(0), r8.z
    and r3.xyz, r9.xzwx, v10.yzwy
    or r3.xy, r3.ywyy, r3.xzxx
    or r2.w, r3.y, r3.x
    imul null, r2.w, r2.w, l(3)
    add r3.x, -cb2[r0.x + 0].w, cb2[r2.w + 0].w
    add r3.y, -cb2[r0.x + 1].w, cb2[r2.w + 1].w
    add r3.z, -cb2[r0.x + 2].w, cb2[r2.w + 2].w
    dp3 r4.w, v7.yzwy, icb[r8.y + 0].xyzx
    mad r4.xyz, cb2[r2.w + 0].xyzx, r4.wwww, r4.xyzx
    mad r5.xyz, cb2[r2.w + 1].xyzx, r4.wwww, r5.xyzx
    mad r6.xyz, cb2[r2.w + 2].xyzx, r4.wwww, r6.xyzx
    mad r7.xyz, r3.xyzx, r4.wwww, r7.xyzx
  endloop
  lt r0.y, l(0.000000), v8.x
  if_nz r0.y
    mov r0.yzw, r4.xxyz
    mov r1.xyz, r5.xyzx
    mov r2.xyz, r6.xyzx
    mov r3.xyz, r7.xyzx
    mov r1.w, l(0)
    loop
      ige r2.w, r1.w, l(4)
      breakc_nz r2.w
      ineg r2.w, r1.w
      ult r8.xyz, r1.wwww, l(1, 2, 3, 0)
      and r9.y, r2.w, r8.y
      iadd r10.xy, r1.wwww, l(-3, 1, 0, 0)
      movc r9.z, r8.y, l(0), r10.x
      ieq r9.w, r8.z, l(0)
      mov r9.x, r8.x
      and r8.xyzw, r9.xyzw, v11.xyzw
      or r8.xy, r8.ywyy, r8.xzxx
      or r2.w, r8.y, r8.x
      imul null, r2.w, r2.w, l(3)
      add r8.x, -cb2[r0.x + 0].w, cb2[r2.w + 0].w
      add r8.y, -cb2[r0.x + 1].w, cb2[r2.w + 1].w
      add r8.z, -cb2[r0.x + 2].w, cb2[r2.w + 2].w
      dp4 r3.w, v8.xyzw, icb[r1.w + 0].xyzw
      mad r0.yzw, cb2[r2.w + 0].xxyz, r3.wwww, r0.yyzw
      mad r1.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r1.xyzx
      mad r2.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r2.xyzx
      mad r3.xyz, r8.xyzx, r3.wwww, r3.xyzx
      mov r1.w, r10.y
    endloop
    mov r4.xyz, r0.yzwy
    mov r5.xyz, r1.xyzx
    mov r6.xyz, r2.xyzx
    mov r7.xyz, r3.xyzx
    lt r0.y, l(0.000000), v9.x
    if_nz r0.y
      mov r0.yzw, r4.xxyz
      mov r1.xyz, r5.xyzx
      mov r2.xyz, r6.xyzx
      mov r3.xyz, r7.xyzx
      mov r1.w, l(0)
      loop
        ige r2.w, r1.w, l(4)
        breakc_nz r2.w
        ineg r2.w, r1.w
        ult r8.xyz, r1.wwww, l(1, 2, 3, 0)
        and r9.y, r2.w, r8.y
        iadd r10.xy, r1.wwww, l(-3, 1, 0, 0)
        movc r9.z, r8.y, l(0), r10.x
        ieq r9.w, r8.z, l(0)
        mov r9.x, r8.x
        and r8.xyzw, r9.xyzw, v12.xyzw
        or r8.xy, r8.ywyy, r8.xzxx
        or r2.w, r8.y, r8.x
        imul null, r2.w, r2.w, l(3)
        add r8.x, -cb2[r0.x + 0].w, cb2[r2.w + 0].w
        add r8.y, -cb2[r0.x + 1].w, cb2[r2.w + 1].w
        add r8.z, -cb2[r0.x + 2].w, cb2[r2.w + 2].w
        dp4 r3.w, v9.xyzw, icb[r1.w + 0].xyzw
        mad r0.yzw, cb2[r2.w + 0].xxyz, r3.wwww, r0.yyzw
        mad r1.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r1.xyzx
        mad r2.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r2.xyzx
        mad r3.xyz, r8.xyzx, r3.wwww, r3.xyzx
        mov r1.w, r10.y
      endloop
      mov r4.xyz, r0.yzwy
      mov r5.xyz, r1.xyzx
      mov r6.xyz, r2.xyzx
      mov r7.xyz, r3.xyzx
    endif
  endif
  dp3 r0.y, v0.xyzx, r4.xyzx
  add r1.x, r7.x, r0.y
  dp3 r0.y, v0.xyzx, r5.xyzx
  add r1.y, r7.y, r0.y
  dp3 r0.y, v0.xyzx, r6.xyzx
  add r1.z, r7.z, r0.y
  mov r2.x, cb2[r0.x + 0].w
  mov r2.y, cb2[r0.x + 1].w
  mov r2.z, cb2[r0.x + 2].w
  add r0.xyw, r1.xyxz, r2.xyxz
  mul r1.xyzw, r0.yyyy, cb9[1].xyzw
  mad r1.xyzw, r0.xxxx, cb9[0].xyzw, r1.xyzw
  mad r1.xyzw, r0.wwww, cb9[2].xyzw, r1.xyzw
  add o0.xyzw, r1.xyzw, cb9[3].xyzw
  dp3 r1.x, r4.xyzx, v5.xyzx
  dp3 r1.y, r5.xyzx, v5.xyzx
  dp3 r1.z, r6.xyzx, v5.xyzx
  add r1.xyz, r1.xyzx, l(0.000010, 0.000000, 0.000000, 0.000000)
  dp3 r1.w, r1.xyzx, r1.xyzx
  rsq r1.w, r1.w
  mul r1.xyz, r1.wwww, r1.yzxy
  dp3 r2.x, r4.xyzx, v6.xyzx
  dp3 r2.y, r5.xyzx, v6.xyzx
  dp3 r2.z, r6.xyzx, v6.xyzx
  add r2.xyz, r2.xyzx, l(0.000010, 0.000000, 0.000000, 0.000000)
  dp3 r1.w, r2.xyzx, r2.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r2.zxyz
  mov r3.w, r0.x
  mov r4.w, r0.y
else
  mul r5.xyz, v0.yyyy, cb7[1].xyzx
  mad r5.xyz, v0.xxxx, cb7[0].xyzx, r5.xyzx
  mad r5.xyz, v0.zzzz, cb7[2].xyzx, r5.xyzx
  add r0.xyw, r5.xyxz, cb7[3].xyxz
  mul r5.xyzw, r0.yyyy, cb9[1].xyzw
  mad r5.xyzw, r0.xxxx, cb9[0].xyzw, r5.xyzw
  mad r5.xyzw, r0.wwww, cb9[2].xyzw, r5.xyzw
  add o0.xyzw, r5.xyzw, cb9[3].xyzw
  mul r5.xyz, v5.yyyy, cb7[1].xyzx
  mad r5.xyz, v5.xxxx, cb7[0].xyzx, r5.xyzx
  mad r5.xyz, v5.zzzz, cb7[2].xyzx, r5.xyzx
  add r5.xyz, r5.xyzx, l(0.000010, 0.000000, 0.000000, 0.000000)
  dp3 r1.w, r5.xyzx, r5.xyzx
  rsq r1.w, r1.w
  mul r1.xyz, r1.wwww, r5.yzxy
  mul r5.xyz, v6.yyyy, cb7[1].xyzx
  mad r5.xyz, v6.xxxx, cb7[0].xyzx, r5.xyzx
  mad r5.xyz, v6.zzzz, cb7[2].xyzx, r5.xyzx
  add r5.xyz, r5.xyzx, l(0.000010, 0.000000, 0.000000, 0.000000)
  dp3 r1.w, r5.xyzx, r5.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, r5.zxyz
  mov r3.w, r0.x
  mov r4.w, r0.y
endif
mul r5.xyz, r1.yzxy, r2.zxyz
mad r5.xyz, r1.xyzx, r2.xyzx, -r5.xyzx
mul r5.xyz, r5.xyzx, v6.wwww
mul r6.xyz, r2.zzzz, cb9[6].xyzx
mad r2.yzw, r2.yyyy, cb9[5].xxyz, r6.xxyz
mad r3.xyz, r2.xxxx, cb9[7].xyzx, r2.yzwy
mul r2.xyz, r5.yyyy, cb9[6].xyzx
mad r2.xyz, r5.xxxx, cb9[5].xyzx, r2.xyzx
mad r4.xyz, r5.zzzz, cb9[7].xyzx, r2.xyzx
mul r2.xyz, r1.xxxx, cb9[6].xyzx
mad r2.xyz, r1.zzzz, cb9[5].xyzx, r2.xyzx
mad r0.xyz, r1.yyyy, cb9[7].xyzx, r2.xyzx
add r2.xyzw, v2.xyzw, cb7[4].xyzw
add r5.xyzw, v3.xyzw, cb7[5].xyzw
add r6.xyzw, v4.xyzw, cb7[6].xyzw
movc o3.xyzw, cb1[0].xxxx, r2.xyzw, r2.xyxy
movc o4.xyzw, cb1[0].xxxx, r5.xyzw, r2.xyxy
movc o5.xyzw, cb1[0].xxxx, r6.xyzw, r2.xyxy
movc o2.xyz, cb1[3].yyyy, v1.xyzx, l(1.000000,1.000000,1.000000,0)
dp3 o1.w, r1.zxyz, cb7[7].xyzx
mov o1.xyz, l(0,0,0,0)
mov o6.xyzw, r3.xyzw
mov o7.xyzw, r4.xyzw
mov o8.xyzw, r0.xyzw
ret
// Approximately 186 instruction slots used
#endif
