// asmtool.py -i --only-autofixed --auto-fix-vertex-halo 8b9d3f6237795cf6-vs.txt
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v0.6.178 on Tue Jun  6 11:19:45 2023
//
//
// Buffer Definitions:
//
// cbuffer bool_register_block
// {
//
//   bool gUseMultiUV;                  // Offset:    0 Size:     4
//   bool gPointLightEnable0;           // Offset:    4 Size:     4 [unused]
//   bool gPointLightEnable1;           // Offset:    8 Size:     4 [unused]
//   bool gPointLightEnable2;           // Offset:   12 Size:     4 [unused]
//   bool gPointLightEnable3;           // Offset:   16 Size:     4 [unused]
//   bool gEnvMappingEnable;            // Offset:   20 Size:     4 [unused]
//   bool gShadowEnable;                // Offset:   24 Size:     4 [unused]
//   bool gLightScatterEnable;          // Offset:   28 Size:     4
//   bool gFogEnable;                   // Offset:   32 Size:     4
//   bool gVertexBlendEnable2;          // Offset:   40 Size:     4
//   bool gVertexBlendEnable3;          // Offset:   44 Size:     4 [unused]
//   bool gVertexBlendEnable4;          // Offset:   48 Size:     4 [unused]
//   bool gUseInputVertexColor;         // Offset:   52 Size:     4
//   int2 bool_register_block_padding;  // Offset:   56 Size:     8 [unused]
//
// }
//
// cbuffer model_high_frequency_block
// {
//
//   row_major float4x4 gStaticTransformMatrix;// Offset:    0 Size:    64
//   float4 gUVOffset0;                 // Offset:   64 Size:    16
//   float4 gUVOffset1;                 // Offset:   80 Size:    16
//   float4 gUVOffset2;                 // Offset:   96 Size:    16
//   float4 gShadowVector;              // Offset:  112 Size:    16 [unused]
//   float4 gShadowOffset;              // Offset:  128 Size:    16 [unused]
//
// }
//
// cbuffer model_high_frequency_material_block
// {
//
//   float4 gConstantColor;             // Offset:    0 Size:    16 [unused]
//   float4 gLScatterHighFreq;          // Offset:   16 Size:    16
//   float4 gHDRRate;                   // Offset:   32 Size:    16
//   float4 gSpecularColor;             // Offset:   48 Size:    16 [unused]
//   float4 gModelHighFreqPadding0;     // Offset:   64 Size:    16 [unused]
//   float4 gVelvetyColor;              // Offset:   80 Size:    16 [unused]
//   float4 gRimColor;                  // Offset:   96 Size:    16
//   float4 gVelvetyRimParam;           // Offset:  112 Size:    16
//
// }
//
// cbuffer model_high_frequency_light_block
// {
//
//   float4 gAmbientColor[2];           // Offset:    0 Size:    32
//   float4 gHemisphereVector;          // Offset:   32 Size:    16
//   row_major float3x4 gLightDirection;// Offset:   48 Size:    48
//   row_major float3x4 gLightColorDir; // Offset:   96 Size:    48
//   float4 gLightColorPoint[4];        // Offset:  144 Size:    64 [unused]
//   float4 gLightPosition[4];          // Offset:  208 Size:    64 [unused]
//
// }
//
// cbuffer model_low_frequency_block
// {
//
//   row_major float4x4 gViewProjection;// Offset:    0 Size:    64
//   float4 gEyePosition;               // Offset:   64 Size:    16
//   row_major float4x4 gViewMatrix;    // Offset:   80 Size:    64 [unused]
//   row_major float4x4 gShadowMatrix;  // Offset:  144 Size:    64 [unused]
//   float4 gClipPlane0;                // Offset:  208 Size:    16 [unused]
//   float4 gLScatterSunColor;          // Offset:  224 Size:    16
//   float4 gLScatterSunDir;            // Offset:  240 Size:    16
//   float4 gLScatterOutTmp;            // Offset:  256 Size:    16
//   float4 gLScatterRayTmp;            // Offset:  272 Size:    16
//   float4 gLScatterMieTmp;            // Offset:  288 Size:    16
//   float4 gFogMiddle;                 // Offset:  304 Size:    16
//   float4 gFogFarMiddle;              // Offset:  320 Size:    16
//   float4 gFogDistance;               // Offset:  336 Size:    16
//   float4 gFogDensity;                // Offset:  352 Size:    16
//   float4 gHeightFogMiddle;           // Offset:  368 Size:    16
//   float4 gHeightFogFarMiddle;        // Offset:  384 Size:    16
//   float4 gHeightFogDistance;         // Offset:  400 Size:    16
//   float4 gHeightFogDensity;          // Offset:  416 Size:    16
//   row_major float4x4 gSecondShadowMatrix;// Offset:  432 Size:    64 [unused]
//
// }
//
// cbuffer skinning_matrix_block
// {
//
//   row_major float3x4 gSkinningMatrices[256];// Offset:    0 Size: 12288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// bool_register_block               cbuffer      NA          NA    1        1
// skinning_matrix_block             cbuffer      NA          NA    2        1
// model_high_frequency_material_block    cbuffer      NA          NA    5        1
// model_high_frequency_light_block    cbuffer      NA          NA    6        1
// model_high_frequency_block        cbuffer      NA          NA    7        1
// model_low_frequency_block         cbuffer      NA          NA    9        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// NORMAL                   0   xyz         5     NONE   float   xyz
// BLENDWEIGHT              0   xyzw        6     NONE   float   xyzw
// BLENDWEIGHT              1   xyzw        7     NONE   float   xyzw
// BLENDWEIGHT              2   xyzw        8     NONE   float   xyzw
// BLENDINDICES             0   xyzw        9     NONE    uint   xyzw
// BLENDINDICES             1   xyzw       10     NONE    uint   xyzw
// BLENDINDICES             2   xyzw       11     NONE    uint   xyzw
// TEXCOORD                 3   xyzw       12     NONE   float   xyzw
// TEXCOORD                 4   xyzw       13     NONE   float   xyzw
// TEXCOORD                 5   xyzw       14     NONE   float   xyzw
// TEXCOORD                 6   x          15     NONE   float   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 8   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyz         2     NONE   float   xyz
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyzw
// TEXCOORD                 3   xyzw        6     NONE   float   xyzw
// COLOR                    1   xyzw        7     NONE   float   xyzw
// TEXCOORD                 4   xyz         8     NONE   float   xyz
//
vs_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} }
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb7[7], immediateIndexed
dcl_constantbuffer cb5[8], immediateIndexed
dcl_constantbuffer cb6[9], immediateIndexed
dcl_constantbuffer cb9[27], immediateIndexed
dcl_constantbuffer cb2[768], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyz
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_input v10.xyzw
dcl_input v11.xyzw
dcl_input v12.xyzw
dcl_input v13.xyzw
dcl_input v14.xyzw
dcl_input v15.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_temps 14
// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r13.xyzw, l(0, 0, 0, 0), t125.xyzw

dp3 r0.x, v0.xyzx, v12.xyzx
add r0.x, r0.x, v12.w
dp3 r0.w, v0.xyzx, v13.xyzx
add r0.y, r0.w, v13.w
dp3 r0.w, v0.xyzx, v14.xyzx
add r0.z, r0.w, v14.w
dp3 r1.x, v12.xyzx, v5.xyzx
dp3 r1.y, v13.xyzx, v5.xyzx
dp3 r1.z, v14.xyzx, v5.xyzx
if_nz cb1[2].z
  imul null, r0.w, v9.x, l(3)
  mul r2.xyz, v6.xxxx, cb2[r0.w + 0].xyzx
  mov r1.w, l(0)
  mul r3.xyz, v6.xxxx, cb2[r0.w + 1].xyzx
  mul r4.xyz, v6.xxxx, cb2[r0.w + 2].xyzx
  mov r5.w, l(0)
  mov r6.xyz, r2.xyzx
  mov r7.xyz, r3.xyzx
  mov r8.xyz, r4.xyzx
  mov r9.xyz, r1.wwww
  mov r10.x, l(1)
  loop
    ige r2.w, r10.x, l(4)
    breakc_nz r2.w
    iadd r10.xyz, r10.xxxx, l(1, -1, -4, 0)
    ineg r2.w, r10.y
    ult r11.xy, r10.yyyy, l(1, 2, 0, 0)
    and r11.z, r2.w, r11.y
    movc r11.w, r11.y, l(0), r10.z
    and r5.xyz, r11.xzwx, v9.yzwy
    or r5.xy, r5.ywyy, r5.xzxx
    or r2.w, r5.y, r5.x
    imul null, r2.w, r2.w, l(3)
    add r5.x, -cb2[r0.w + 0].w, cb2[r2.w + 0].w
    add r5.y, -cb2[r0.w + 1].w, cb2[r2.w + 1].w
    add r5.z, -cb2[r0.w + 2].w, cb2[r2.w + 2].w
    dp3 r3.w, v6.yzwy, icb[r10.y + 0].xyzx
    mad r6.xyz, cb2[r2.w + 0].xyzx, r3.wwww, r6.xyzx
    mad r7.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r7.xyzx
    mad r8.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r8.xyzx
    mad r9.xyz, r5.xyzx, r3.wwww, r9.xyzx
  endloop
  lt r1.w, l(0.000000), v7.x
  if_nz r1.w
    mov r2.xyz, r6.xyzx
    mov r3.xyz, r7.xyzx
    mov r4.xyz, r8.xyzx
    mov r5.xyz, r9.xyzx
    mov r1.w, l(0)
    loop
      ige r2.w, r1.w, l(4)
      breakc_nz r2.w
      ineg r2.w, r1.w
      ult r10.xyz, r1.wwww, l(1, 2, 3, 0)
      and r11.y, r2.w, r10.y
      iadd r12.xy, r1.wwww, l(-3, 1, 0, 0)
      movc r11.z, r10.y, l(0), r12.x
      ieq r11.w, r10.z, l(0)
      mov r11.x, r10.x
      and r10.xyzw, r11.xyzw, v10.xyzw
      or r10.xy, r10.ywyy, r10.xzxx
      or r2.w, r10.y, r10.x
      imul null, r2.w, r2.w, l(3)
      add r10.x, -cb2[r0.w + 0].w, cb2[r2.w + 0].w
      add r10.y, -cb2[r0.w + 1].w, cb2[r2.w + 1].w
      add r10.z, -cb2[r0.w + 2].w, cb2[r2.w + 2].w
      dp4 r3.w, v7.xyzw, icb[r1.w + 0].xyzw
      mad r2.xyz, cb2[r2.w + 0].xyzx, r3.wwww, r2.xyzx
      mad r3.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r3.xyzx
      mad r4.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r4.xyzx
      mad r5.xyz, r10.xyzx, r3.wwww, r5.xyzx
      mov r1.w, r12.y
    endloop
    mov r6.xyz, r2.xyzx
    mov r7.xyz, r3.xyzx
    mov r8.xyz, r4.xyzx
    mov r9.xyz, r5.xyzx
    lt r1.w, l(0.000000), v8.x
    if_nz r1.w
      mov r2.xyz, r6.xyzx
      mov r3.xyz, r7.xyzx
      mov r4.xyz, r8.xyzx
      mov r5.xyz, r9.xyzx
      mov r1.w, l(0)
      loop
        ige r2.w, r1.w, l(4)
        breakc_nz r2.w
        ineg r2.w, r1.w
        ult r10.xyz, r1.wwww, l(1, 2, 3, 0)
        and r11.y, r2.w, r10.y
        iadd r12.xy, r1.wwww, l(-3, 1, 0, 0)
        movc r11.z, r10.y, l(0), r12.x
        ieq r11.w, r10.z, l(0)
        mov r11.x, r10.x
        and r10.xyzw, r11.xyzw, v11.xyzw
        or r10.xy, r10.ywyy, r10.xzxx
        or r2.w, r10.y, r10.x
        imul null, r2.w, r2.w, l(3)
        add r10.x, -cb2[r0.w + 0].w, cb2[r2.w + 0].w
        add r10.y, -cb2[r0.w + 1].w, cb2[r2.w + 1].w
        add r10.z, -cb2[r0.w + 2].w, cb2[r2.w + 2].w
        dp4 r3.w, v8.xyzw, icb[r1.w + 0].xyzw
        mad r2.xyz, cb2[r2.w + 0].xyzx, r3.wwww, r2.xyzx
        mad r3.xyz, cb2[r2.w + 1].xyzx, r3.wwww, r3.xyzx
        mad r4.xyz, cb2[r2.w + 2].xyzx, r3.wwww, r4.xyzx
        mad r5.xyz, r10.xyzx, r3.wwww, r5.xyzx
        mov r1.w, r12.y
      endloop
      mov r6.xyz, r2.xyzx
      mov r7.xyz, r3.xyzx
      mov r8.xyz, r4.xyzx
      mov r9.xyz, r5.xyzx
    endif
  endif
  dp3 r1.w, r0.xyzx, r6.xyzx
  add r2.x, r9.x, r1.w
  dp3 r1.w, r0.xyzx, r7.xyzx
  add r2.y, r9.y, r1.w
  dp3 r1.w, r0.xyzx, r8.xyzx
  add r2.z, r9.z, r1.w
  mov r3.x, cb2[r0.w + 0].w
  mov r3.y, cb2[r0.w + 1].w
  mov r3.z, cb2[r0.w + 2].w
  add r2.xyz, r2.xzyx, r3.xzyx
  mul r3.xyzw, r2.zzzz, cb9[1].xyzw
  mad r3.xyzw, r2.xxxx, cb9[0].xyzw, r3.xyzw
  mad r3.xyzw, r2.yyyy, cb9[2].xyzw, r3.xyzw
  add r3.xyzw, r3.xyzw, cb9[3].xyzw
  dp3 r4.x, r6.xyzx, r1.xyzx
  dp3 r4.y, r7.xyzx, r1.xyzx
  dp3 r4.z, r8.xyzx, r1.xyzx
  dp3 r0.w, r4.xyzx, r4.xyzx
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r4.xyzx
else
  mul r5.xyz, r0.yyyy, cb7[1].xyzx
  mad r0.xyw, r0.xxxx, cb7[0].xyxz, r5.xyxz
  mad r0.xyz, r0.zzzz, cb7[2].xyzx, r0.xywx
  add r2.xyz, r0.xzyx, cb7[3].xzyx
  mul r0.xyzw, r2.zzzz, cb9[1].xyzw
  mad r0.xyzw, r2.xxxx, cb9[0].xyzw, r0.xyzw
  mad r0.xyzw, r2.yyyy, cb9[2].xyzw, r0.xyzw
  add r3.xyzw, r0.xyzw, cb9[3].xyzw
  mul r0.xyz, r1.yyyy, cb7[1].xyzx
  mad r0.xyz, r1.xxxx, cb7[0].xyzx, r0.xyzx
  mad r0.xyz, r1.zzzz, cb7[2].xyzx, r0.xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r4.xyz, r0.wwww, r0.xyzx
endif
add r0.xyz, r2.xzyx, -cb9[4].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyzw, v2.xyzw, cb7[4].xyzw
add r5.xyzw, v3.xyzw, cb7[5].xyzw
add r6.xyzw, v4.xyzw, cb7[6].xyzw
movc o3.xyzw, cb1[0].xxxx, r1.xyzw, r1.xyxy
movc o4.xyzw, cb1[0].xxxx, r5.xyzw, r1.xyxy
movc o5.xyzw, cb1[0].xxxx, r6.xyzw, r1.xyxy
mul r1.w, v1.w, cb5[2].w
mov r1.xyz, v1.xyzx
mov r2.x, l(1.000000)
mov r2.w, cb5[2].w
movc r1.xyzw, cb1[3].yyyy, r1.xyzw, r2.xxxw
dp3 r2.x, r4.xyzx, -r0.xyzx
mad_sat r2.x, |r2.x|, cb5[7].z, cb5[7].w
dp3 r2.y, r4.xyzx, cb6[2].xyzx
mad r5.xyz, r2.yyyy, cb6[1].xyzx, cb6[0].xyzx
dp3 r6.x, cb6[3].xyzx, r4.xyzx
dp3 r6.y, cb6[4].xyzx, r4.xyzx
dp3 r6.z, cb6[5].xyzx, r4.xyzx
mov_sat r7.xyz, r6.xyzx
mul r7.xyz, r7.xyzx, l(0.318310142, 0.318310142, 0.318310142, 0.000000)
mul r8.xyz, r7.yyyy, cb6[7].xyzx
mad r7.xyw, r7.xxxx, cb6[6].xyxz, r8.xyxz
mad r7.xyz, r7.zzzz, cb6[8].xyzx, r7.xywx
dp3_sat r8.x, cb6[3].xyzx, r0.xyzx
dp3_sat r8.y, cb6[4].xyzx, r0.xyzx
dp3_sat r8.z, cb6[5].xyzx, r0.xyzx
add r6.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul_sat r6.xyz, r6.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mul r6.xyz, r6.xyzx, r8.xyzx
mul r2.xyw, r2.xxxx, r6.xyxz
mul r6.xyz, r2.yyyy, cb6[7].xyzx
mad r6.xyz, r2.xxxx, cb6[6].xyzx, r6.xyzx
mad r2.xyw, r2.wwww, cb6[8].xyxz, r6.xyxz
mad r2.xyw, r2.xyxw, cb5[6].xyxz, r7.xyxz
add o1.xyz, r2.xywx, r5.xyzx
add r0.w, r0.w, cb5[1].y
mul r2.xyw, r0.wwww, cb9[16].xyxz
exp r2.xyw, r2.xyxw
add r5.xyz, r2.xywx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r5.xyz, cb5[1].xxxx, r5.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
dp3 r0.x, cb9[15].xyzx, r0.xyzx
mad r0.y, r0.x, r0.x, l(1.000000)
mad r0.x, cb9[18].w, r0.x, cb9[17].w
mul r0.z, r0.x, r0.x
mul r0.x, r0.x, r0.z
sqrt r0.x, r0.x
div r0.xzw, cb9[18].xxyz, r0.xxxx
mad r0.xyz, cb9[17].xyzx, r0.yyyy, r0.xzwx
add r2.xyw, -r2.xyxw, l(1.000000, 1.000000, 0.000000, 1.000000)
mul r0.xyz, r0.xyzx, r2.xywx
mul r0.xyz, r0.xyzx, cb9[14].xyzx
movc r2.xyw, cb1[1].wwww, r5.xyxz, l(1.000000,1.000000,0,1.000000)
movc r0.xyz, cb1[1].wwww, r0.xyzx, l(0,0,0,0)
movc r5.xy, cb1[2].xxxx, cb9[22].xyxx, l(0,0,0,0)

// Relocated to here with asmtool.py
mov o0.xyzw, r3.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -i --only-autofixed --auto-fix-vertex-halo 8b9d3f6237795cf6-vs.txt
ne r13.w, r3.w, l(1.0)
if_nz r13.w
  add r13.w, r3.w, -r13.y
  mad r3.x, r13.w, r13.x, r3.x
endif

add r5.zw, r3.wwww, -cb9[21].xxxy
mul_sat r5.zw, r5.zzzw, cb9[21].zzzw
dp2 r0.w, r5.zwzz, r5.xyxx
mad r5.xyz, cb9[20].xyzx, r5.wwww, cb9[19].xyzx
add r4.w, -r0.w, l(1.000000)
mul r5.xyz, r0.wwww, r5.xyzx
movc r6.xy, cb1[2].xxxx, cb9[26].xyxx, l(0,0,0,0)
add r6.zw, r2.zzzz, -cb9[25].xxxy
mul_sat r6.zw, r6.zzzw, cb9[25].zzzw
dp2 r0.w, r6.zwzz, r6.xyxx
mad r6.xyz, cb9[24].xyzx, r6.wwww, cb9[23].xyzx
add r2.z, -r0.w, l(1.000000)
mul r6.xyz, r0.wwww, r6.xyzx
mul r2.xyw, r2.zzzz, r2.xyxw
mul o7.xyz, r4.wwww, r2.xywx
mad r0.xyz, r0.xyzx, r2.zzzz, r6.xyzx
mad o6.xyz, r0.xyzx, r4.wwww, r5.xyzx
mov_sat r0.x, v15.x
mul o1.w, r0.x, r1.w

// mov o0.xyzw, r3.xyzw // Relocated from here with asmtool.py

mov o6.w, l(0)
mov o7.w, l(0)
mov o2.xyz, r1.xyzx
mov o8.xyz, r4.xyzx
ret
// Approximately 233 instruction slots used