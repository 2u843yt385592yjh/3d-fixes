// CRC32: 5AA1B653 |    Unity headers extracted from Internal-Flare.shader
//    Shader "Hidden/Internal-Flare" {
//      SubShader 1/1 {
//        Tags { "RenderType"="Overlay" }
//        Pass 1/1 {
//          Tags { "RenderType"="Overlay" }
//          ZTest Always
//          ZWrite Off
//          Cull Off
//          Blend One One
//          ColorMask RGB
//          GpuProgramID 33804
//          Program "vp" {
//            SubProgram "d3d9 " {
//              GpuProgramIndex 1
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Internal-Flare.shader.decompressed:
//   API d3d9
//   Shader model vs_2_0
//   undeciphered1: 6 -1 -1
//   undeciphered3: 13 3 0 0 2 1 3 4 1
//   Vector 4 [_FlareTexture_ST]
//   Matrix 0 [glstate_matrix_mvp]
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//   using 3Dmigoto command line v1.2.36 on Sun Jun 19 22:15:50 2016
//
//
// Parameters:
//
//   float4 _FlareTexture_ST;
//   row_major float4x4 glstate_matrix_mvp;
//
//
// Registers:
//
//   Name               Reg   Size
//   ------------------ ----- ----
//   glstate_matrix_mvp c0       4
//   _FlareTexture_ST   c4       1
//

    vs_3_0 // Converted from vs_2_0 with DarkStarSword's shadertool.py
    dcl_position v0
    dcl_color v1
    dcl_texcoord v2

dcl_texcoord o0
dcl_position o1
dcl_color o2


def c220, 0, 1, 0.0625, 0.5
dcl_2d s0

    dp4 r0.x, c0, v0
    dp4 r0.y, c1, v0
    dp4 r0.z, c2, v0
    dp4 r0.w, c3, v0
    mad o0.xy, v2, c4, c4.zwzw
    mov o2, v1

// This shader has the correct depth, but driver heuristics moves it to screen
// depth some of the time. e.g. the glow around the moon at the start is at
// screen depth, but the moon itself is at the correct depth.

// Perform the stereo correction, but then normalise the output coordinate such
// that W == convergence so that the driver's stereo correction won't move it
// further regardless of what it's heuristics decide.

texldl r31, c220.z, s0
add r31.w, r0.w, -r31.y
mad r0.x, r31.w, r31.x, r0.x

// Only normalise if depth is positive and convergence is non-zero -
// normalising when this is behind the camera can break stuff (e.g. Seraph
// Kavarna Neon Angel sign outside apartment from certain angles) and if we
// normalise with stereo disabled it would disappear
if_gt r0.w, c220.x
	if_ne r31.y, c220.x
		rcp r31.w, r0.w
		mul r31.w, r31.y, r31.w
		mul r0, r0, r31.w
	endif
endif

//add r31.w, r0.w, -r31.y
//mul r0, r0, r31.w

mov o1, r0
