// CRC32: 5D9CFDD4 |    Unity headers extracted from Internal-DeferredShading.shader
//    Shader "Hidden/Internal-DeferredShading" {
//      Properties {
//       _LightTexture0 ("", any) = "" { }
//       _LightTextureB0 ("", 2D) = "" { }
//       _ShadowMapTexture ("", any) = "" { }
//       _SrcBlend ("", Float) = 1
//       _DstBlend ("", Float) = 1
//      }
//      Fallback Off
//      SubShader 1/1 {
//        Pass 1/2 {
//          Tags { "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Blend [_SrcBlend] [_DstBlend]
//          GpuProgramID 36028
//          Program "vp" {
//            SubProgram "d3d9 " {
//              GpuProgramIndex 0
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Internal-DeferredShading.shader.decompressed:
//   API d3d9
//   Shader model vs_3_0
//   undeciphered1: 16 -1 -1
//   Keywords { "POINT" "SHADOWS_OFF" }
//   undeciphered3: 3 2 0 0 1 2 1
//   Float 9 [_LightAsQuad]
//   Vector 7 [_ProjectionParams]
//   Vector 8 [_ScreenParams]
//   Matrix 4 [glstate_matrix_modelview0] 3
//   Matrix 0 [glstate_matrix_mvp]
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://raw.githubusercontent.com/DarkStarSword/3d-fixes/master/extract_unity53_shaders.py

//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//   using 3Dmigoto command line v1.2.36 on Sun Jun 19 22:48:53 2016
//
//
// Parameters:
//
//   float _LightAsQuad;
//   float4 _ProjectionParams;
//   float4 _ScreenParams;
//   row_major float4x4 glstate_matrix_modelview0;
//   row_major float4x4 glstate_matrix_mvp;
//
//
// Registers:
//
//   Name                      Reg   Size
//   ------------------------- ----- ----
//   glstate_matrix_mvp        c0       4
//   glstate_matrix_modelview0 c4       3
//   _ProjectionParams         c7       1
//   _ScreenParams             c8       1
//   _LightAsQuad              c9       1
//

    vs_3_0
    def c10, 0.5, -1, 1, 0
    dcl_position v0
    dcl_normal v1
    dcl_position o0
    dcl_texcoord o1
    dcl_texcoord1 o2.xyz

def c220, 0, 1, 0.0625, 1
dcl_2d s0

    // Rearranged to simplify shader:
    dp4 r0.x, c0, v0
    dp4 r0.y, c1, v0
    dp4 r0.z, c2, v0
    dp4 r0.w, c3, v0
    mov o0, r0 // moved up before the stereo correction

// Apply texcoord correction only when not drawing a full screen quad:
if_ne r0.w, c220.y
	// Apply stereo correction to screen coords stored in texcoord:
	texldl r31, c220.z, s0
	add r31.w, r0.w, -r31.y
	mul r31.w, r31.w, r31.x
	add r0.x, r0.x, r31.w
endif

    mul r1.x, r0.y, c7.x
    mul r1.w, r1.x, c10.x
    mul r1.xz, r0.xyww, c10.x
    mad o1.xy, r1.z, c8.zwzw, r1.xwzw
    dp4 r1.x, c4, v0
    dp4 r1.y, c5, v0
    dp4 r1.z, c6, v0

// Apply view-space ray correction only when not drawing a full screen quad:
if_ne r0.w, c220.y

	// This technique has changed a little starting with the Unity 5 update
	// of Dreamfall Chapters. The old technique still works just fine, but
	// I wanted to adjust _WorldSpaceCameraPos in a number of shaders and
	// my quest to find a way to solve both problems reliably (by script)
	// led me to find a way to fix the lighting shaders using world-space
	// coordinates instead of view-space coordinates - that way, I could
	// keep the number of matrices I needed to copy with Helix Mod down to
	// 2 (the limit).
	//
	// This is the one part of the lighting fix that still needs a
	// view-space correction, but fortunately we only need to do this when
	// the shader has valid MV and MVP matrices so we can still derive the
	// inverse projection matrix to get the FOV like usual.

	// We can't use Helix mod to invert the MV matrix since we are already
	// using both matrix copy slots for the inverse MVP and _Object2World
	// matrices, and the MV matrix in Unity 5 is only a 3x4 matrix, while
	// Helix Mod expects a 4x4 matrix.
	// So let's do it directly in assembly instead! It sounds complicated,
	// but we can make some large simplifications based on assumptions
	// about the MV and MVP matrices and the fact we only need one cell of
	// the (inverse) projection matrix, which means it is actually possible
	// to do in a farily small number of instructions :)

	// Use a temporary register for MV[1] to get around the fact that some
	// of the below instructions need to read from more constant registers
	// than there are available read ports:
	mov r26, c5

	// 1. Calculate 1/determinant of the MV matrix, simplifying by assuming the
	//    4th column of the MV matrix is 0,0,0,1
	//
	// mathomatic simplified it to:
	// 1 / ((m12*((m20*m01) - (m21*m00))) + (m02*((m21*m10) - (m20*m11))) + (m22*((m00*m11) - (m01*m10))));
	//
	// Replace row numbers with register components (assumes column-major order):
	//   (mv2.x*((mv0.y*mv1.z) - (mv0.z*mv1.y)))
	// + (mv2.y*((mv0.z*mv1.x) - (mv0.x*mv1.z)))
	// + (mv2.z*((mv0.x*mv1.y) - (mv0.y*mv1.x)))

	// Do some multiplications in parallel with SIMD instructions:
	mul r20.xyz, c4.yzx, r26.zxy	// mv0.y*mv1.z, mv0.z*mv1.x, mv0.x*mv1.y
	mul r21.xyz, c4.zxy, r26.yzx	// mv0.z*mv1.y, mv0.x*mv1.z, mv0.y*mv1.x
	// Do the subtractions:
	add r20.xyz, r20.xyz, -r21.xyz	// mv0.y*mv1.z - mv0.z*mv1.y, mv0.z*mv1.x - mv0.x*mv1.z, mv0.x*mv1.y - mv0.y*mv1.x
	// Now the final three multiplications and the two additions:
	dp3 r22.w, r20.xyz, c6.xyz
	// And finally get 1/determinant:
	rcp r22.w, r22.w

	// 2. Calculate the 1st row of the inverted MV matrix, simplifying by assuimg
	//    the 4th column of the MV matrix is 0,0,0,1
	//
	// m00 = (mv1.y*mv2.z - mv1.z*mv2.y) / determinant
	// m01 = (mv1.z*mv2.x - mv1.x*mv2.z) / determinant
	// m02 = (mv1.x*mv2.y - mv1.y*mv2.x) / determinant

	// Do some multiplications in parallel with SIMD instructions:
	mul r20.xyz, r26.yzx, c6.zxy	// mv1.y*mv2.z, mv1.z*mv2.x, mv1.x*mv2.y
	mul r21.xyz, r26.zxy, c6.yzx	// mv1.z*mv2.y, mv1.x*mv2.z, mv1.y*mv2.x
	// Do the subtractions:
	add r20.xyz, r20.xyz, -r21.xyz	// mv1.y*mv2.z - mv1.z*mv2.y, mv1.z*mv2.x - mv1.x*mv2.z, mv1.x*mv2.y - mv1.y*mv2.x
	// Multiply against 1/determinant:
	mul r20.xyz, r20.xyz, r22.www

	// 3. Multiply the first row of the inverted MV matrix with the 1st column of
	//    the MVP matrix (MV.I[0,3] is 0, so only worry about the 1st three):
	dp3 r30.x, r20.xyz, c0.xyz

	rcp r30.x, r30.x // Calculate P.I[0,0]

	// Apply view-space stereo correction to ray:
	mad r1.x, r31.w, r30.x, r1.x
endif

    mul r2.xyz, r1, c10.yyzw
    mad r1.xyz, r1, -c10.yyzw, v1
    mad o2.xyz, c9.x, r1, r2
    mov o1.zw, r0

// approximately 16 instruction slots used
