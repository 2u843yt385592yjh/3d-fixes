// asmtool.py --remap-cb 0 100 -i d9574405cd41c6fd-cs.txt
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.65 on Tue Sep 12 13:42:44 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { 0.111111112, 0, 0, 0},
                              { 0.333333343, 0, 0, 0},
                              { 0.444444448, 0, 0, 0},
                              { 0.666666687, 0, 0, 0},
                              { 0.222222224, 0, 0, 0},
                              { 0.555555582, 0, 0, 0},
                              { 0.777777791, 0, 0, 0},
                              { 0.888888896, 0, 0, 0},
                              { 0.0370370373, 0, 0, 0},
                              { 0.148148149, 0, 0, 0},
                              { 0.370370358, 0, 0, 0},
                              { 0.703703701, 0, 0, 0},
                              { 0.259259254, 0, 0, 0},
                              { 0.481481493, 0, 0, 0},
                              { 0.592592597, 0, 0, 0},
                              { 0.814814806, 0, 0, 0} }
dcl_constantbuffer cb0[30], immediateIndexed
dcl_constantbuffer cb1[33], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_input vThreadID.xyz
dcl_temps 26
dcl_thread_group 4, 4, 4
dcl_resource_structured t100, 480

// cb0 remapped to t100 with DarkStarSword's asmtool.py:
// asmtool.py --remap-cb 0 100 -i d9574405cd41c6fd-cs.txt
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r5.xyzw, l(0), l(64), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r6.xyzw, l(0), l(80), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r7.xyzw, l(0), l(96), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r8.xyzw, l(0), l(128), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r9.xyzw, l(0), l(144), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r10.xyzw, l(0), l(160), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r11.xyzw, l(0), l(176), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r12.xyzw, l(0), l(192), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r13.xyzw, l(0), l(208), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r14.xyzw, l(0), l(224), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r15.xyzw, l(0), l(240), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r16.xyzw, l(0), l(256), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r17.xyzw, l(0), l(336), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r18.xyzw, l(0), l(352), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r19.xyzw, l(0), l(368), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r20.xyzw, l(0), l(384), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r21.xyzw, l(0), l(400), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r22.xyzw, l(0), l(416), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r23.xyzw, l(0), l(432), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r24.xyzw, l(0), l(448), t100.xyzw
ld_structured_indexable(structured_buffer, stride=480)(mixed,mixed,mixed,mixed) r25.xyzw, l(0), l(464), t100.xyzw

utof r0.xyz, vThreadID.xyzx
add r1.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, r22.zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r1.yzw, r1.yyyy, r6.xxyz
mad r1.xyz, r1.xxxx, r5.xyzx, r1.yzwy
add r1.xyz, r1.xyzx, r7.xyzx
mov r2.xy, l(0,0,0,0)
mov r0.w, cb1[32].x
mov r1.w, l(0)
loop 
  uge r2.z, r1.w, l(4)
  breakc_nz r2.z
  iadd r2.z, r1.w, cb1[32].y
  and r2.z, r2.z, l(15)
  add r2.z, r0.z, icb[r2.z + 0].x
  mul r2.z, r2.z, r24.z
  mul r2.z, r2.z, r2.z
  mad r2.z, r2.z, r24.w, r12.w
  mul r3.xyz, r1.xyzx, r2.zzzz
  mul r2.w, r3.y, r9.z
  mad r2.w, r3.x, r8.z, r2.w
  mad r2.w, r3.z, r10.z, r2.w
  add r2.w, r2.w, r11.z
  mov r3.x, l(0)
  loop 
    ult r3.y, r3.x, r0.w
    ge r3.z, cb1[r3.x + 24].x, r2.w
    ge r3.w, r2.w, cb1[r3.x + 24].y
    or r3.z, r3.w, r3.z
    and r3.y, r3.z, r3.y
    breakc_z r3.y
    iadd r3.x, r3.x, l(1)
  endloop 
  uge r2.w, r3.x, r0.w
  if_nz r2.w
    break 
  endif 
  mad r3.yzw, r1.xxyz, r2.zzzz, r12.xxyz
  ishl r2.z, r3.x, l(2)
  mul r4.xyz, r3.zzzz, cb1[r2.z + 5].xyzx
  mad r4.xyz, r3.yyyy, cb1[r2.z + 4].xyzx, r4.xyzx
  mad r3.yzw, r3.wwww, cb1[r2.z + 6].xxyz, r4.xxyz
  add r3.yzw, r3.yyzw, cb1[r2.z + 7].xxyz
  min r2.z, r3.w, l(0.999990)
  ieq r4.xyz, r3.xxxx, l(1, 2, 3, 0)
  if_z r3.x
    sample_l_indexable(texture2d)(float,float,float,float) r2.w, r3.yzyy, t2.yzwx, s0, l(0.000000)
    add r2.w, -r2.z, r2.w
    mad_sat r2.w, r2.w, cb1[r3.x + 28].x, l(1.000000)
  else 
    mov r2.w, l(1.000000)
  endif 
  if_nz r4.x
    sample_l_indexable(texture2d)(float,float,float,float) r3.w, r3.yzyy, t3.yzwx, s0, l(0.000000)
    add r3.w, -r2.z, r3.w
    mad_sat r2.w, r3.w, cb1[r3.x + 28].x, l(1.000000)
  endif 
  if_nz r4.y
    sample_l_indexable(texture2d)(float,float,float,float) r3.w, r3.yzyy, t4.yzwx, s0, l(0.000000)
    add r3.w, -r2.z, r3.w
    mad_sat r2.w, r3.w, cb1[r3.x + 28].x, l(1.000000)
  endif 
  if_nz r4.z
    sample_l_indexable(texture2d)(float,float,float,float) r3.y, r3.yzyy, t5.yxzw, s0, l(0.000000)
    add r2.z, -r2.z, r3.y
    mad_sat r2.w, r2.z, cb1[r3.x + 28].x, l(1.000000)
  endif 
  add r2.x, r2.w, r2.x
  add r2.y, r2.y, l(1.000000)
  iadd r1.w, r1.w, l(1)
endloop 
ilt r3.xyz, vThreadID.xyzx, r23.xyzx
and r0.w, r3.y, r3.x
and r0.w, r3.z, r0.w
if_nz r0.w
  mov_sat r0.w, r25.y
  add r0.w, r0.w, r0.z
  mul r0.w, r0.w, r24.z
  mul r0.w, r0.w, r0.w
  mad r0.w, r0.w, r24.w, r12.w
  mul r1.xyz, r0.wwww, r1.xyzx
  mov r3.xyz, vThreadID.xyzx
  mov r3.w, l(0)
  ld_indexable(texture3d)(float,float,float,float) r4.xyzw, r3.xyzw, t0.xyzw
  ld_indexable(texture3d)(float,float,float,float) r3.xyz, r3.xyzw, t1.xyzw
  dp3 r0.w, r1.xyzx, r1.xyzx
  rsq r0.w, r0.w
  mul r1.xyz, r0.wwww, r1.xyzx
  dp3_sat r0.w, -r1.xyzx, cb1[1].xyzx
  log r0.w, r0.w
  mul r0.w, r0.w, cb1[2].w
  exp r0.w, r0.w
  mul r1.xyz, r0.wwww, cb1[2].xyzx
  mad r1.xyz, cb1[0].xyzx, l(0.0795774683, 0.0795774683, 0.0795774683, 0.000000), r1.xyzx
  eq r0.w, r2.y, l(0.000000)
  div r1.w, r2.x, r2.y
  movc r0.w, r0.w, l(1.000000), r1.w
  mul r1.w, cb1[3].x, l(0.0795774683)
  mad r1.xyz, r1.xyzx, r0.wwww, r1.wwww
  mul r1.xyz, r1.xyzx, r4.xyzx
  add r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r0.xy, r0.xyxx, r22.zwzz, l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r0.z, r0.z, r24.z
  mul r0.z, r0.z, r0.z
  mad r0.z, r0.z, r24.w, r12.w
  mul r2.xyz, r0.yyyy, r6.xyzx
  mad r0.xyw, r0.xxxx, r5.xyxz, r2.xyxz
  add r0.xyw, r0.xyxw, r7.xyxz
  mad r0.xyz, r0.xywx, r0.zzzz, r12.xyzx
  mul r2.xyz, r0.yyyy, r14.xywx
  mad r2.xyz, r0.xxxx, r13.xywx, r2.xyzx
  mad r2.xyz, r0.zzzz, r15.xywx, r2.xyzx
  add r2.xyz, r2.xyzx, r16.xywx
  div r2.xy, r2.xyxx, r2.zzzz
  add r0.xyz, r0.xyzx, -r21.xyzx
  mul r0.y, r0.y, r18.z
  mad r0.x, r0.x, r17.z, r0.y
  mad r0.x, r0.z, r19.z, r0.x
  add r0.x, r0.x, r20.z
  mad r0.yz, r2.xxyx, r22.xxyx, r22.xxyx
  add r0.x, r0.x, -r21.w
  div r0.x, r0.x, r24.w
  rsq r0.x, r0.x
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  itof r0.w, r23.z
  mul r0.x, r0.w, r0.x
  round_ni r2.xyz, r0.yzxy
  ftoi r0.xyz, r2.xyzx
  ige r2.xyz, r0.xyzx, l(0, 0, 0, 0)
  ilt r0.xyz, r0.xyzx, r23.xyzx
  and r0.xyz, r0.xyzx, r2.xyzx
  and r0.x, r0.y, r0.x
  and r0.x, r0.z, r0.x
  movc r0.x, r0.x, r25.w, l(1.000000)
  mad r4.xyz, r0.xxxx, r1.xyzx, r3.xyzx
  store_uav_typed u0.xyzw, vThreadID.xyzz, r4.xyzw
endif 
ret 
// Approximately 0 instruction slots used